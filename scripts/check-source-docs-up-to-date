#!/usr/bin/env node

const glob = require('glob');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');

const cross = chalk.red('✖');
const tick = chalk.green('✔');

function findFiles(pattern, options = undefined) {
  return new Promise((resolve, reject) => {
    glob.glob(pattern, options, (err, result) => {
      if (err) {
        reject(err);
      } else {
        resolve(result);
      }
    });
  });
}

async function main() {
  const sourceFiles = await findFiles('./src/**/*.ts');
  const scriptFiles = await findFiles('./scripts/*');

  const files = sourceFiles.concat(scriptFiles).filter(f => path.basename(f) !== 'README.md');

  let exitCode = 0;

  const sourceFolders = new Set(files.map(file => path.dirname(file)));

  for (const folder of sourceFolders) {
    console.log(folder);
    const filesInFolder = files.filter(file => path.dirname(file) === folder);

    let folderDocs = "";
    try {
      folderDocs = fs.readFileSync(path.join(folder, 'README.md'), 'utf-8');
    } catch (e) {
      if (e.code && e.code === "ENOENT") {
        console.log(` ${cross} README.md is missing!`);
        console.log();
        exitCode = 1;
      }
      continue;
    }


    const entries = folderDocs.split("\n").filter(line => line.trim().startsWith('###'));
    const fileEntries = entries.map(entry => entry.slice(3).trim());

    const missingDocs = [];
    for (const file of filesInFolder) {
      const basename = path.basename(file);
      if (!fileEntries.includes(basename)) {
        missingDocs.push(` ${cross} missing entry for ${basename}`);
        exitCode = 1;
      } else {
        console.log(` ${tick} ${basename}`);
      }
    }

    for (const doc of missingDocs) {
      console.log(doc);
    }

    console.log();
  }

  process.exit(exitCode);
}

main();
